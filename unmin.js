const a = ['_cooldown', '_lastBeat', '_subbands', '_energyHistSize', '_energyHist', '_currentBeats', 'getReferenceEnergy', 'length', 'bandEnergy', 'getStdDeviation', 'sqrt', 'getThresholdFactor', 'max', 'detectBeats', 'getTime', 'getCurrentEnergy', 'floor', 'push', 'updateHistory', 'shift', 'updateBeats', '_currentBandBeats', 'getBeats', 'prototype', 'frequencyBinCount', 'array', 'getByteFrequencyData', 'getSpectrum', 'usesAnalyzer', 'maxDecibels', 'minDecibels', 'getFloatFrequencyData', 'PI2', 'alpha', 'apply', 'cos', 'fft', 'window', 'minDeci', 'maxDeci', 'sampleRate', 'getChannelData', 'immitateWebkitFFT', 'forward', 'abs', 'linearToDecibels', 'min', 'log', 'LN10', 'detector', 'spectrum', 'lastSpectrum', 'showSpectrum', 'scriptProcessor', 'getBeatAnalyzerNode', 'smoothingTimeConstant', 'connect', 'createScriptProcessor', 'onaudioprocess', 'inputBuffer', 'bind', 'getBeatAnalyzer', 'getBeatAnalyzerSpectrum', 'getElementsByTagName', 'script', 'src', 'split', 'slice', 'join', 'proxy.php?', 'waveImg', 'updateImage', 'onload', 'drawWaveform', 'getElementById', 'waveformCanvas', 'getContext', 'save', '#333333', '#232323', '#999999', '#b9b9b9', '#ff5200', '#ff3400', '#ffd5c0', '#ffaa80', 'globalAlpha', 'createLinearGradient', 'addColorStop', 'fillStyle', 'fillRect', 'lineWidth', 'strokeStyle', 'rgba(255,255,255,0.3)', 'beginPath', 'moveTo', 'lineTo', 'stroke', 'globalCompositeOperation', 'destination-out', 'width', 'height', 'drawImage', 'restore', 'createBiquadFilter', 'LOWPASS', 'lowpass', 'HIGHPASS', 'highpass', 'BANDPASS', 'bandpass', 'LOWSHELF', 'lowshelf', 'PEAKING', 'peaking', 'HIGHSHELF', 'highshelf', 'NOTCH', 'notch', 'ALLPASS', 'allpass', 'NO_FILTER', 'analyzerCfg', 'once', 'getAnalyzer', 'getHiHatAnalyzer', 'getBandAnalyzer', 'getVolAnalyzer', 'setupBeatAnalyzer', 'destination', 'setupWebAudioNodes', 'createMediaElementSource', 'createAnalyser', 'fftSize', 'type', 'frequency', 'value', 'gain', 'setConfig', 'currentSong', 'playlist', 'player', 'running', 'setupPlaylist', 'indexOf', '/sets/', 'setNextSong', 'tracks', 'permalink_url', 'replace', 'http://soundcloud.com', 'https://soundcloud.com', '#sound-title', 'html', '<a\x20target=\x22_blank\x22\x20href=\x22https://www.soundcloud.com', 'title', '</a>', 'waveform_url', 'initMusic', 'startPlayCallback', 'startMusic', 'location', 'hash', 'substring', '/fractalflames/sets/ablaze', 'autoplay', '#isloading', 'empty', 'append', '<div\x20class=\x22loading\x22><img\x20src=\x22/ablaze/images/loading.gif\x22></div>', '.json', 'http:', 'https:', 'protocol', 'getJSON', 'setAttribute', '/audio', 'addEventListener', 'stalled', 'play', 'emptied', 'suspend', 'playing', 'canplay', 'startProgress', 'ended', '#mp3Source', 'attr', 'detach', 'appendTo', '#player', 'load', 'fail', 'Sorry\x20but\x20there\x20is\x20no\x20music\x20with\x20perma\x20link:\x20', 'updateProgress', 'stopProgress', 'getCurrentPlayTime', 'currentTime', 'duration', 'U_PROJECTION', 'U_MODELVIEW', 'U_TEXTURE', 'U_VERTEX_ARRAY', 'U_TEXTURE_COORD_ARRAY', 'U_COLOR_ARRAY', 'mvMatrix', 'prMatrix', 'mvpMatrix', 'txMatrix', 'activeMatrix', 'mvStack', 'prStack', 'txStack', 'activeStack', 'makeProgramObject', 'loadShader', 'VERTEX_SHADER', 'FRAGMENT_SHADER', 'createProgram', 'attachShader', 'deleteShader', 'linkProgram', 'getProgramParameter', 'LINK_STATUS', 'error', 'An\x20error\x20occurred\x20compiling\x20the\x20shaders:\x20', 'getProgramInfoLog', 'Unable\x20to\x20initialize\x20the\x20shader\x20program.', 'setLegacyAttribLocation', 'draw_texture', 'transformMat4', 'create', 'fromValues', 'createBuffer', 'bindBuffer', 'ARRAY_BUFFER', 'bufferData', 'STATIC_DRAW', 'itemSize', 'numItems', 'enableVertexAttribArray', 'leg_gl_Vertex', 'vertexAttribPointer', 'FLOAT', 'drawArrays', 'TRIANGLE_STRIP', 'createShader', 'shaderSource', 'compileShader', 'getShaderParameter', 'COMPILE_STATUS', 'getShaderInfoLog', 'uMatrixMode', 'uLoadIdentity', 'multiply', 'uTranslatef', 'uScalef', 'uPushMatrix', 'uPopMatrix', 'pop', 'getAttribLocation', 'leg_gl_ProjectionMatrix', 'getUniformLocation', 'leg_gl_ModelViewMatrix', 'leg_gl_Color', 'setLegacyFixedPipelineParams', 'uniformMatrix4fv', '_name', '_code', '_areaCode', 'getName', 'getCode', 'hasInverse', 'getInverseCode', 'getAreaCode', '_inversecode', 'linear', 'p=t;', 'return\x20f(p);', 'return\x201.0;', 'sinusoidal', 'p=vec2(sin(t.x),sin(t.y));', 'if\x20(abs(p.x)>1.0\x20||\x20abs(p.y)>1.0)\x20return\x20vec4(0.0);', 'vec4\x20sum=vec4(0.0);', 'vec2\x20t=vec2(asin(p.x),asin(p.y));', 'const\x20float\x20img=2.0;', 'for\x20(float\x20dy=-img;dy<=img;dy++)\x20{', '\x09for\x20(float\x20dx=-img;dx<=img;dx++)\x20{', '\x09\x09sum+=f(vec2(\x20t.x+M_PI*2.0*dx,t.y+M_PI*2.0*dy));', '\x09\x09sum+=f(vec2(-t.x+M_PI*(1.0+2.0*dx),t.y+M_PI*2.0*dy));', '\x09\x09sum+=f(vec2(-t.x+M_PI*(1.0+2.0*dx),-t.y+M_PI*(1.0+2.0*dy)));', '\x09\x09sum+=f(vec2(\x20t.x+M_PI*2.0*dx,-t.y+M_PI*(1.0+2.0*dy)));', 'return\x20sum;', 'return\x20cos(t.x)*cos(t.y);', 'spherical', 'float\x20r2=dot(t,t)\x20+\x20EPS;', 'p=t/r2;', 'float\x20r2=dot(p,p);', 'return\x20f(p/r2);', 'float\x20r2=dot(t,t);', 'return\x201.0/(r2*r2);', 'swirl', 'float\x20s=sin(r2);\x20float\x20c=cos(r2);', 'p=vec2(', '\x09s*t.x-c*t.y,', '\x09c*t.x+s*t.y', 'if\x20(r2>10.0)\x20return\x20vec4(0.0);', 'return\x20f(vec2(', '\x09s*p.x+c*p.y,', '\x09-c*p.x+s*p.y', '));', 'horseshoe', 'float\x20r=1.0/(length(t)+EPS);', '\x09(t.x-t.y)*(t.x+t.y)*r,', '\x092.0*t.x*t.y*r', 'float\x20r2\x20=\x20p.x*p.x\x20+\x20p.y*p.y;', 'float\x20r=sqrt(r2);', 'float\x20aspect\x20=\x20(p.x\x20+\x20r)/p.y;', 'float\x20y\x20=\x20sqrt(0.5*(r2\x20-\x20p.x*r));', 'return\x20f(vec2(y*aspect,y))', '\x09\x20\x20+f(vec2(-y*aspect,-y));', 'return\x202.0;', 'polar', '\x09atan2(t.x,t.y)*M_1_PI,', '\x09length(t)-1.0', 'if\x20(p.x>=-1.0\x20&&\x20p.x<=1.0\x20&&\x20p.y>-1.0)', '\x09return\x20f((p.y+1.0)*vec2(sin(p.x*M_PI),cos(p.x*M_PI)));', 'else', '\x09return\x20vec4(0.0);', 'return\x20M_1_PI/length(t);', 'handkerchief', 'float\x20a=atan2(t.x,t.y);', 'float\x20r=length(t);', 'p=r*vec2(', '\x09sin(a+r),', '\x09cos(a-r)', 'return\x20cos(2.0*r)\x20+\x202.0*t.x*t.y/r\x20-\x20r*sin(2.0*r);', 'heart', '\x09r*sin(r*a),', '\x09(-r)*cos(r*a)', 'float\x20r=length(p);', 'float\x20at2=atan2(p.x,-p.y);', 'float\x20pilo=ceil((-M_PI*r-at2)/(2.0*M_PI));', 'float\x20pihi=floor((+M_PI*r-at2)/(2.0*M_PI));', 'float\x20s=\x20floor(pihi-pilo);', 'for\x20(float\x20pic=pilo;\x20pic<=pihi;\x20pic++)\x20{', '\x09if\x20(pic>s)\x20break;', '\x09float\x20a=(at2+\x20(pic+pilo)\x20*5.0*M_PI)/r;', '\x09sum+=f(r*vec2(sin(a),cos(a)));', 'return\x20length(t);', 'disc', 'float\x20a=atan2(t.x,t.y)*M_1_PI;', 'float\x20r=length(t)*M_PI;', 'p=a*vec2(', '\x09sin(r),', '\x09cos(r)', 'return\x20M_1_PI*a/length(t);', 'spiral', 'float\x20r=length(t)+EPS;', 'float\x20r1=1.0/r;', 'p=r1*vec2(', '\x09cos(a)+sin(r),', '\x09sin(a)-cos(r)', 'return\x20(1.0\x20-\x20r*cos(r\x20-\x20a)\x20+\x20sin(r\x20-\x20a))/r2;', 'hyperbolic', 'float\x20r2=dot(t,t)+1.0e-6;', 'p=vec2(t.x/r2,t.y);', 'float\x20v01\x20=\x201.0/p.x;', 'float\x20det=1.0\x20-\x204.0*p.x*p.x*p.y*p.y;', 'if\x20(det>=0.0)\x20{', '\x09float\x20v03\x20=\x20sqrt(det);', '\x09return\x20f(vec2(((v01*(1.0\x20-\x20v03))/2.0),p.y))', '\x09\x09\x20\x20+f(vec2(((v01*(1.0\x20+\x20v03))/2.0),p.y));', '}\x20else\x20{', 'return\x20(1.0-2.0*t.y*t.y/r2)/r2;', 'diamond', 'p=vec2(sin(a)*cos(r),cos(a)*sin(r));', 'return\x20(cos(2.0*r)+2.0*t.y*t.y/r2-1.0)/(2.0*r);', 'float\x20n0=sin(a+r);', 'float\x20n1=cos(a-r);', 'float\x20m0=n0*n0*n0*r;', 'float\x20m1=n1*n1*n1*r;', 'p=vec2(m0+m1,m0-m1);', 'float\x20s2r=sin(2.0*r);', 'float\x20c2r=cos(2.0*r);', 'float\x20inner=s2r+t.x*t.y/r2;', 'return\x201.5\x20/\x20r*(6.0*t.x*t.y\x20+\x20r*c2r\x20-\x203.0*r2*s2r)*inner*inner;', 'julia', 'p=vec2(sqrt(0.5*(r+t.y)),sqrt(0.5*(r-t.y)));', 'if\x20(t.x<0.0)\x20p.y=-p.y;', 'if\x20(p.x<0.0)\x20return\x20vec4(0.0);', 'return\x20f(vec2(\x202.0*p.x*p.y,\x20(p.x\x20-\x20p.y)*(p.x\x20+\x20p.y)\x20));', 'return\x201.0/(4.0*length(t));', 'bent', 'vec2\x20n=t;', 'if\x20(n.x<0.0)\x20n.x*=2.0;', 'if\x20(n.y<0.0)\x20n.y*=0.5;', 'p=n;', 'vec2\x20n=p;', 'if\x20(n.x<0.0)\x20n.x*=0.5;', 'if\x20(n.y<0.0)\x20n.y*=2.0;', 'return\x20f(n);', 'float\x20scale=1.0;', 'if\x20(t.x<0.0)\x20scale=2.0;', 'if\x20(t.y<0.0)\x20scale*=0.5;', 'return\x20scale;', 'fisheye', 'r=2/(r+1);', 'p=r*vec2(t.y,t.x);', 'float\x20s=length(p);', 'float\x20r=1.0/(2.0-s);', 'if\x20(r>=0.0)', '\x09return\x20f(r*vec2(p.y,p.x));', 'float\x20r1=1.0+r;', 'return\x204.0/(r1*r1*r1);', 'exponential', 'float\x20dx=exp(t.x-1.0);', 'float\x20dy=M_PI*t.y;', 'p=dx*vec2(cos(dy),sin(dy));', 'float\x20a=atan2(p.y,p.x);', 'return\x20f(vec2(log(r)+1.0,a*M_1_PI));', 'return\x20M_PI*exp(2.0*t.x-2.0);', 'power', 'p=vec2(cos(a),sin(a))*pow(length(t),sin(a));', 'float\x20r=pow(length(p),\x201.0/sin(a));', 'if\x20(r==0.0\x20||\x20r+1.0==r)', '\x09return\x20f(r*vec2(sin(a),cos(a)));', 'float\x20ir=1.0/length(t);', 'float\x20r=1.0/ir;', 'return\x20pow(r,\x20(2.0*(t.x*ir)-2.0))*(t.x*ir);', 'cosine', 'float\x20n=t.x*M_PI;', 'p=vec2(cos(n)*cosh(t.y),-sin(n)*sinh(t.y));', 'return\x200.5*M_PI*(-cos(2.0*M_PI*t.x)+cosh(2.0*t.y));', 'float\x20TXfmPL(float\x20x)\x20{', '\x09x*=texscale;', '\x09return\x201.0/sqrt(1.0+x*x)*0.5+0.5;', 'vec2\x20TXfmPL(vec2\x20p)\x20{', '\x09return\x20vec2(TXfmPL(p.x/EPS),TXfmPL(p.y/EPS));', 'float\x20PLfmTX(float\x20s)\x20{', '\x09float\x20u=2.0*s-1.0;', '\x09return\x20texscalei/sqrt(1.0-u*u);', 'vec2\x20PLfmTX(vec2\x20s)\x20{', '\x09return\x20vec2(PLfmTX(s.x/EPS),PLfmTX(s.y/EPS));', 'const\x20float\x20M_PI=3.14159265358979;', 'const\x20float\x20M_1_PI=1.0/M_PI;', 'const\x20float\x20EPS=1.0e-6;', 'uniform\x20float\x20texscale;', 'uniform\x20float\x20texscalei;', 'float\x20atan2(float\x20y,\x20float\x20x)\x20{', '\x20\x20float\x20t0,\x20t1,\x20t2,\x20t3,\x20t4;', '\x20\x20t3\x20=\x20abs(x);', '\x20\x20t1\x20=\x20abs(y);', '\x20\x20t0\x20=\x20max(t3,\x20t1);', '\x20\x20t1\x20=\x20min(t3,\x20t1);', '\x20\x20t3\x20=\x201.0\x20/\x20t0;', '\x20\x20t3\x20=\x20t1\x20*\x20t3;', '\x20\x20t4\x20=\x20t3\x20*\x20t3;', '\x20\x20t0\x20=\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20-0.013480470;', '\x20\x20t0\x20=\x20t0\x20*\x20t4\x20+\x200.057477314;', '\x20\x20t0\x20=\x20t0\x20*\x20t4\x20-\x200.121239071;', '\x20\x20t0\x20=\x20t0\x20*\x20t4\x20+\x200.195635925;', '\x20\x20t0\x20=\x20t0\x20*\x20t4\x20-\x200.332994597;', '\x20\x20t0\x20=\x20t0\x20*\x20t4\x20+\x200.999995630;', '\x20\x20t3\x20=\x20t0\x20*\x20t3;', '\x20\x20if\x20(abs(y)\x20>\x20abs(x))\x20t3=\x201.570796327\x20-\x20t3;', '\x20\x20if\x20(x\x20<\x200.0)\x20t3=\x20\x20M_PI\x20-\x20t3;', '\x20\x20if\x20(y\x20<\x200.0)\x20t3=\x20-t3;', '\x20\x20return\x20t3;', '_tag', '_var', '_weight', '_wvar', '_nUniforms', 'getTag', 'getWeight', 'getX', 'getY', 'getO', 'setX', 'setY', 'setO', 'equals', 'undefined', 'NOOOO!!!!!\x20\x20xForm::getAreaCode\x20not\x20implemented', 'getUniformDecl', 'uniform\x20vec2\x20xf%TAG%[8];', '%TAG%', 'getAffineArea', 'makeInverseMatrix', 'scale', 'add', 'getXfUniforms', 'getFloat32Array', 'setUniformLoc', 'xfUniformLoc', 'setUniforms', 'nUniforms', 'uniform2fv', 'vec2\x20applyMap%TAG%(vec2\x20t)\x20{', '\x09t=xf%TAG%[0]*t.x+xf%TAG%[1]*t.y+xf%TAG%[2];', '\x20\x09vec2\x20p;', '{\x09%CODE%\x0a}', '\x09return\x20xf%TAG%[6].x*p;', 'float\x20jacobian%TAG%(vec2\x20t)\x20{', '\x20%AREA_CODE%', 'float\x20getDensity(vec2\x20t)\x20{', '\x09return\x201.0/(1.0e-3+abs(xf%TAG%[7].x*jacobian%TAG%(t)));', '%CODE%', '%AREA_CODE%', 'NOINV', 'vec4\x20f%TAG%(vec2\x20inv)\x20{', '\x09float\x20areaScale=1.0/(1.0e-2+abs(xf%TAG%[7].x*jacobian%TAG%(inv)));', '\x09vec2\x20p=xf%TAG%[3]*inv.x+xf%TAG%[4]*inv.y+xf%TAG%[5];', '\x09return\x20areaScale*g%TAG%(p);', 'vec4\x20nonlinear_inverse%TAG%(vec2\x20p)\x20{', '\x09p=p*xf%TAG%[6].y;', '\x09%INV_CODE%', '%INV_CODE%', 'getMapExposure', 'getColorful', 'getTexScale', 'getFirstLevel', 'getLastLevel', 'getScreenInitVal', 'getScreenInitScale', 'getIterations', 'animate', 'defaultAnimate', 'getView', 'getAnimRates', 'animRate', 'sin', 'decay', 'getFlameTransforms', 'angles', 'origX', 'origY', 'subtract', 'map_exposure', 'colorful', 'texscale', 'force_vertexonly', 'disc_compute', 'firstlevel', 'lastlevel', 'nlevel', 'screen_initval', 'screen_initscale', 'iterations', 'oldval', 'getForceVertexOnly', 'getDiscCompute', 'getNLevel', 'frameSrc', 'frameDest', 'swap', 'setSource', 'setDestination', 'getSource', 'getDestination', 'getExtension', 'OES_float_linear', 'OES_half_float_linear', 'useFloatTextures', 'config', 'xfm_cached_px', 'progPerPixMap', 'xfm_prog', 'xfm_cached_vx', 'lastRes', 'cachedVertices', 'texLevels', 'fbo', 'getConfig', 'getI', 'setTextureUniformLocs', 'tex', 'texscalei', 'setProgramParams', 'uniform1i', 'uniform1f', 'errorExit', 'Fatal\x20error>\x20', 'framebuffer\x20setup\x20failed', 'bad_framebuffer', 'FRAMEBUFFER_COMPLETE', 'gl.framebufferTexture2D', 'framebuffer\x20is\x20actually\x20OK\x20(?!)', 'FRAMEBUFFER_UNSUPPORTED', 'combination\x20of\x20formats\x20is\x20UNSUPPORTED\x20by\x20your\x20card', 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT', 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT', 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS', 'FRAMEBUFFER\x20\x20logic\x20error', 'mapColor', 'getInversFnsSnippet', '/*-------------------\x20w%TAG%\x20-----------------*/', 'uniform\x20vec4\x20color%TAG%;', 'vec4\x20g%TAG%(vec2\x20p)\x20{', '\x09return\x20exp2(texture(tex,TXfmPL(p))*20.0)-1.0;', 'getSumFnsSnippet', '\x09sum+=color%TAG%*nonlinear_inverse%TAG%(p);', 'simulate_perpixel_maps', '#version\x20300\x20es\x0a', 'precision\x20highp\x20\x20float;', 'out\x20vec2\x20destcoords;', 'in\x20vec4\x20leg_gl_Vertex;', 'uniform\x20mat4\x20leg_gl_ProjectionMatrix;', 'uniform\x20mat4\x20leg_gl_ModelViewMatrix;', 'void\x20main(void)\x20{', '\x09destcoords\x20=\x20vec2(leg_gl_Vertex);', '\x09gl_Position\x20=\x20leg_gl_ProjectionMatrix\x20*\x20leg_gl_ModelViewMatrix\x20*\x20leg_gl_Vertex;', 'in\x20vec2\x20destcoords;', 'uniform\x20sampler2D\x20tex;', 'out\x20vec4\x20glColor;', '%INV_FUNCS%', 'vec4\x20sum_inverses(vec2\x20p)\x20{', '\x09vec4\x20sum=vec4(0.0);', '%SUM_FUNCS%', '\x09return\x20log2(sum+1.0)*(1.0/20.0);', '\x09glColor\x20=\x20sum_inverses(PLfmTX(destcoords));', 'uniformLocs', 'color', 'useProgram', 'uniform4fv', 'TXfmPL', 'useSeedShader', 'seedShader', '#version\x20300\x20es\x0a\x09\x09\x09\x09\x20\x20precision\x20highp\x20float;\x20\x09\x09\x09\x09\x20\x20in\x20vec4\x20a_Vertex;\x20\x09\x09\x09\x09\x20\x20uniform\x20vec4\x20u_color;\x20\x09\x09\x09\x09\x20\x20out\x20vec4\x20v_color;\x20\x09\x09\x09\x09\x20\x20uniform\x20mat4\x20mvp_matrix;\x20\x09\x09\x09\x09\x20\x20void\x20main()\x20{\x20\x09\x09\x09\x09\x09\x09gl_Position\x20=\x20mvp_matrix\x20*\x20a_Vertex;\x20\x09\x09\x09\x09\x09\x09v_color\x20=\x20u_color;\x20\x09\x09\x09\x09\x20\x20}', '#version\x20300\x20es\x0a\x09\x09\x09\x09\x20\x20precision\x20highp\x20float;\x20\x09\x09\x09\x09\x20\x20in\x20vec4\x20v_color;\x20\x09\x09\x09\x09\x20\x20out\x20vec4\x20glColor;\x20\x09\x09\x09\x09\x20\x20void\x20main()\x20{\x20\x09\x09\x09\x09\x09\x20\x20glColor\x20=\x20v_color;\x20\x09\x09\x09\x09\x20\x20}', 'a_Vertex', 'ucolorloc', 'u_color', 'upointsizeloc', 'u_pointsize', 'mvpmatrixloc', 'mvp_matrix', 'drawSeedTexture', 'clearColor', 'clear', 'COLOR_BUFFER_BIT', 'uniform4f', 'stextureloc', 'addVertex', 'draw_pervertex_map', 'simulate_pervertex_map', 'precision\x20highp\x20float;', '\x20%VAR_CODE%', 'vec2\x20applyMap(vec2\x20t)\x20{', '\x09return\x20TXfmPL(applyMap%ID%(PLfmTX(t)));', 'out\x20vec4\x20color;', 'out\x20vec2\x20texcoords;', 'in\x20vec4\x20leg_gl_Color;', '\x09texcoords=vec2(leg_gl_Vertex);', '\x09vec2\x20onscreen=applyMap(texcoords);', '\x09color=getDensity(texcoords)*leg_gl_Color;', '\x09gl_Position\x20=\x20leg_gl_ProjectionMatrix\x20*\x20leg_gl_ModelViewMatrix\x20*\x20vec4(onscreen,0,1);', 'in\x20vec4\x20color;', 'in\x20vec2\x20texcoords;', '\x09glColor\x20=\x20color*texture(tex,texcoords);', '%VAR_CODE%', '%ID%', 'drawInverseFuncs', 'disable', 'BLEND', 'enable', 'setFramebufTextureAttachment', 'framebufferTexture2D', 'FRAMEBUFFER', 'COLOR_ATTACHMENT0', 'TEXTURE_2D', 'checkFramebufferStatus', 'DEPTH_TEST', 'drawMapLevel', 'viewport', 'scissor', 'bindTexture', 'generateMipmap', 'getTextureLevels', 'create2DArray', 'createTexture', 'UNSIGNED_BYTE', 'texImage2D', 'RGBA', 'EXT_texture_filter_anisotropic', 'MOZ_EXT_texture_filter_anisotropic', 'WEBKIT_EXT_texture_filter_anisotropic', 'texParameterf', 'TEXTURE_MAX_ANISOTROPY_EXT', 'texParameteri', 'TEXTURE_MIN_FILTER', 'LINEAR_MIPMAP_LINEAR', 'TEXTURE_MAG_FILTER', 'LINEAR', 'getFrameBuffer', 'createFramebuffer', 'setupLegacyShaderProg', 'ignite', 'bindFramebuffer', 'blendFunc', 'ONE', 'CULL_FACE', 'sizeX', 'sizeY', 'flameConfigs', 'furnance', 'currentConfigId', 'currentConfig', 'ctxSpectrum', 'spectrumWidth', 'spectrumHeight', 'lastTime', 'currentAnimStart', 'drawSpectrum', 'round', 'clearRect', '#A0A0A0', 'init', 'initGl', 'canvas2', 'opengl', 'isMusicReady', 'someCanvas', 'depth', 'webgl2', 'Your\x20browser\x20does\x20not\x20support\x20WebGL2', 'exec', '.pngImg', 'css', 'background-image', 'val', 'ato', 'getNextConfig', 'render', 'drawScene', 'requestAnimFrame', 'getPostprocessShader', 'postprocessProg', 'out\x20vec3\x20worldCoords;', '\x09worldCoords\x20=\x20vec3(leg_gl_Vertex\x20);', '\x09gl_Position\x20=\x20leg_gl_Vertex;', 'float\x20ab(float\x20x)\x20{\x20return\x20x/sqrt(1.0+x*x)*0.5+0.5;\x20}', 'vec2\x20ab(vec2\x20p)\x20{\x20return\x20vec2(ab(p.x),ab(p.y));\x20}', 'in\x20vec3\x20worldCoords;', 'out\x20vec4\x20fragColor;', 'uniform\x20sampler2D\x20uTexture;', 'uniform\x20float\x20uColormode;', 'uniform\x20vec2\x20uScale;', 'uniform\x20vec2\x20uMove;', 'uniform\x20float\x20uFade;', 'uniform\x20float\x20uDither[64];', 'uniform\x20float\x20uMix;', 'float\x20Scale\x20=\x201.0;', 'float\x20find_closest(int\x20x,\x20int\x20y,\x20float\x20c0)\x20{', 'float\x20limit\x20=\x200.0;', 'if(x\x20<\x208)\x20{', 'int\x20index\x20=\x20x\x20+\x20y*8;', 'limit\x20=\x20(uDither[index]+1.0)/64.0;', 'if(c0\x20<\x20limit)', '\x09return\x200.0;', 'vec2\x20uv=ab(vec2(uScale.x*(worldCoords.x+uMove.x)\x20,uScale.y*((worldCoords.y+uMove.y))));', 'vec3\x20rgb\x20=\x20texture(uTexture,\x20uv).rgb;', 'rgb=\x20(rgb*uColormode\x20+\x20(1.0-rgb)*(1.0-uColormode))*uFade;', 'vec3\x20c;', 'if\x20(uMix\x20>\x200.0)\x20{', 'vec2\x20xy\x20=\x20gl_FragCoord.xy\x20*\x20Scale;', 'int\x20x\x20=\x20int(mod(xy.x,\x208.0));', 'int\x20y\x20=\x20int(mod(xy.y,\x208.0));', 'c.r\x20=\x20find_closest(x,\x20y,\x20rgb.r);', 'c.g\x20=\x20find_closest(x,\x20y,\x20rgb.g);', 'c.b\x20=\x20find_closest(x,\x20y,\x20rgb.b);', 'c=\x20mix(c,\x20rgb,\x20uMix);', 'c=\x20rgb;', 'fragColor\x20=\x20vec4(c,\x201.0);', 'uScale', 'uMove', 'uColormode', 'uFade', 'uTexture', 'uDither', 'uMix', 'DEPTH_BUFFER_BIT', 'activeTexture', 'TEXTURE0', 'uniform2f', 'uniform1fv', 'AudioContext', 'webkitAudioContext', 'You\x20need\x20a\x20recent\x20browser\x20with\x20HTML5\x20WebAudio\x20support.', 'requestAnimationFrame', 'webkitRequestAnimationFrame', 'mozRequestAnimationFrame', 'oRequestAnimationFrame', 'msRequestAnimationFrame', 'setTimeout', 'analyzers', 'cloudPlayer', 'demo', 'hashchange'];

const b = function(c, d) {
    c = c - 0x0;
    var e = a[c];
    return e;
};

const fs = require('fs/promises');

(async () => {
  try {
    const script = await fs.readFile('./ablaze.min.js', { encoding: 'utf8' });
    const newScript = script
      .replaceAll(/b\(\'(0x[0-9a-fA-F]+)\'\)/g, (_, match) => {
        const stringified = JSON.stringify(b(match))
          .slice(1, -1)
          .replaceAll(/\\t/g, "\t")
          .replaceAll(/\\n/g, "\n")
        return `\`${stringified}\``
      })
      .replaceAll(/0[xX][0-9a-fA-F]+/g, (match) => {
        return match - 0x0;
      })
      .replaceAll(/!!\[\]/g, "true")
      .replaceAll(/!\[\]/g, "false")
    await fs.writeFile('./ablaze.raw.js', newScript);
  } catch (err) {
    console.log(err);
  }
})()
